{
    "collab_server" : "",
    "contents" : "---\ntitle: \"DBopen\"\nauthor: \"Philipp Ottolinger\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n## DBopen - Query the DB-Open-Data timetable API\n\nIn 2015 *Deutsche Bahn*, the German state-owned railway company, started an [Open-Data project](http://data.deutschebahn.com/) including access to their [timetable API](http://data.deutschebahn.com/apis/fahrplan/). At the moment this service is available for long-distance traffic only. This package provides some functionality to fetch data from the timetable API easily.\n\nPlease be aware that an authentication key is required to work with `DBopen`[^1]. The team of DB-Open-Date issues API keys to anyone sending an E-Mail to [dbopendata@deutschebahn.com](mailto:dbopendata@deutschebahn.com).\n\n### Get the API specific station ID\n\nEvery train station has a unique API specific ID that is used to identify the station in API queries. `getStopID()` can be used to get the ID of the station that best matches the character pattern `station`. To look up the `stopID` for Hamburg Main Station using the German expression *Hamburg Hbf* where *Hbf* is the clipped form of *Hauptbahnhof* (`<Ger.>` *Main Station*):\n\n```{r, include = F}\nsource(\"authKey.R\")\n```\n\n```{r}\nlibrary(DBopen)\ngetStopID(station = \"Hamburg Hbf\", authKey = authKey)\n```\n\nFor further processing the `stopID` gets stored:\n\n```{r}\nstopID <- getStopID(station = \"Hamburg Hbf\", authKey = authKey)$id\n```\n\n### Fetch departure and arrival boards\n\nWith the just fetched `stopID` one can continue and fetch departure and arrival boards. Both functions, `departureBoard()` and `arrivalBoard()`, require identical input:\n\n* a `stopID` identifying a station\n* a `date` for which the data shall be fetched\n* a `time` of day which the data shall be fetched\n* the API authentication key `authKey` and\n* a logical value (`refs`) indicating whether additional train specific information shall be fetched\n\n```{r}\ndepartureBoard(stopID = stopID, date = \"2016-09-01\", time = \"08:00\", authKey = authKey)\n```\n```{r}\narrivalBoard(stopID = stopID, date = \"2016-09-01\", time = \"18:00\", authKey = authKey)\n```\n\nWhen setting `refs = FALSE` (as is per default) `departureBoard()` and `arrivalBoard()` both return a `data.frame`. With setting `refs = TRUE` this behaviour changes: Both functions then return a list containing \n\n* the departure or arrival board in `$departureBoard` or `$arrivalBoard`\n* a second `data.frame` containing a train specific reference URL for a further API call.\n\nThis second `data.frame` can be found in `$departureBoardRef` or `$arrivalBoardRef` depending on which function you use. For the above departure board `$departureBoardRef` looks like follows:\n\n```{r}\ndep <- departureBoard(stopID = stopID, \n                      date = \"2016-09-01\", \n                      time = \"08:00\", \n                      authKey = authKey, \n                      refs = TRUE)\n```\n```{r, include = F}\ndep$departureBoardRef$Ref <- \"...\"\n```\n```{r}\ndep$departureBoardRef\n```\n\nI have to suppress the actual output for column `Ref` because the API authentication key is visible in the URLs.\n\n### Get further details on a specific train\n\nThe reference URLs available in `$departureBoardRef$Ref` or `$arrivalBoardRef$Ref` can now be used to get additional information on a certain train like \n\n* all stops on a train's journey,\n* coordinates and succession of these stations and\n* arrival and departure times for each station.\n\n```{r, include = F}\ndep <- departureBoard(stopID = stopID, \n                      date = \"2016-09-01\", \n                      time = \"08:00\", \n                      authKey = authKey, \n                      refs = TRUE)\n```\n\n```{r}\nurl <- dep$departureBoardRef$Ref[1]\njourneyDetails(ref = url)\n```\n\n## How `journeyDetails()` can be used\n\nSince `journeyDetails()` includes coordinates and the succession of stops one can use `ggplot2` and `geom_path` to (roughly) plot a train's journey on a map:\n\n```{r, message = F, warnings = F, error = F}\n# Store journey details\njourney <- journeyDetails(ref = url)\n\nlibrary(ggplot2)\nlibrary(ggmap)\n\n# Get a map of Germany\nger <- get_map(location = c(5.14,47.13,15.36,55.25), zoom = 6, maptype = \"toner-background\")\n\nggmap(ger) +\n  geom_point(data = journey, \n             aes(x = lon, \n                 y = lat), \n             size = 3, \n             colour = \"blue\", \n             alpha= 0.6) +\n  geom_path(data = journey, \n            aes(x = lon, \n                y = lat), \n            size = 1, \n            colour = \"blue\", \n            alpha = 0.4)\n```\n\n[^1]: My authentication key is stored in my `.GlobalEnv` as `authKey`.\n\n",
    "created" : 1462909685325.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "594394382",
    "id" : "3ADDC55",
    "lastKnownWriteTime" : 1463000909,
    "last_content_update" : 1463000909478,
    "path" : "~/git/DBopen/vignettes/DBopen.Rmd",
    "project_path" : "vignettes/DBopen.Rmd",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}